# coding=utf-8
"""
Django settings for CatProject project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'lk93bqlmp#7ypl7rjt+p+#nl+xlvr&64rk&#8$)2)r*tai_!*1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False  # 发布模式是无法看到静态资源的

ALLOWED_HOSTS = []
# ALLOWED_HOSTS = ["*", ]  # 发布模式

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'booktest',
    'OA',
    'tinymce',  # 富文本编辑器添加APP中
    'haystack',  # 和搜索引起交互的包
    'djcelery',  # celery模块
)

MIDDLEWARE_CLASSES = (
    # app名称    模块名     类名   先注册的后响应
    'booktest.MyException.MyException',  # 自定义异常处模块添加到中间件中
    'CatProject.MyMiddleware.MyMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'CatProject.MyMiddlewareCopy.MyMiddleware',
)

ROOT_URLCONF = 'CatProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 模板根目录拼接templates
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CatProject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        #  'ENGINE': 'django.db.backends.sqlite3',
        # => default 'NAME': os.path.join(BASE_DIR,'db.sqlite3')
        # => local project=> 'NAME': os.path.join(BASE_DIR,'test1')
        'NAME': 'test1',
        'USER': 'root',
        'PASSWORD': '123',
        'HOST': '127.0.0.1',  # 可以是远程数据库服务器,最好写ipv4地址
        'PORT': '3306'
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/


# LANGUAGE_CODE = 'zh-cn' X 已废弃

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 上传图片路径  (booktest 在模型中upload to 中指定！！！！灵活性)
MEDIR_ROOT = os.path.join(BASE_DIR, "static/upload/")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
#  == >  静态文件不匹配urls.py 直接返回匹配好的目录下的文件
STATIC_URL = '/static/'  # '/mmd/'  # 静态路径匹配规则 ,如果匹配成功了就去下面找,物理目录可以不存在变为逻辑目录隐藏保护的作用
STATICFILES_DIRS = [
    # 这句话的意思是默认去找static文件夹下的和项目同名的=>booktest文件夹
    # 所以要想访问图片的路径==> /static/upload/%s  |  /static/booktest/1.png
    os.path.join(BASE_DIR, "static"),
]
# NGINX 使用该目录寻找静态文件 上面的无关紧要！采集静态文件的目录
STATIC_ROOT = "/var/www/booktest/static/"
# 1.session 默认存储设置 存储到数据库
# SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# 2.session 存储在内存中
# SESSION_ENGINE='django.contrib.sessions.backends.cache'
# 3.可以将缓存和数据库同时使用：优先从本地缓存中获取，如果没有则从数据库中获取
# SESSION_ENGINE='django.contrib.sessions.backends.cached_db'


# 将session 存储到redis
SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS_HOST = 'localhost'
SESSION_REDIS_PORT = 6379
SESSION_REDIS_DB = 0
SESSION_REDIS_PASSWORD = ''
SESSION_REDIS_PREFIX = 'session'  # prefix前缀
"""
pip install django-redis-sessions
启动：sudo redis-server /etc/redis/redis.conf
停止：sudo redis-server stop
重启：sudo redis-server restart
redis-cli：使用客户端连接服务器
keys *：查看所有的键
get name：获取指定键的值
del name：删除指定名称的键
"""
# 富文本编辑器配置
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 600,
    'height': 400,
}

CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": "localhost:6379",
        'TIMEOUT': 60,
    },
}

# 添加搜索引擎
HAYSTACK_CONNECTIONS = {
    'default': {
        # 这里可以更改搜索引擎
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
# 自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# celery 相关
import djcelery

djcelery.setup_loader()
BROKER_URL = 'redis://127.0.0.1:6379/0'  # 默认用0号数据库
CELERY_IMPORTS = ('booktest.task')  # 应用名称.task
